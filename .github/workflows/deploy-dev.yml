name: Deploy to Development

on:
  push:
    branches: [develop, feature/*]
  pull_request:
    branches: [develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if risk score is high'
        required: false
        type: boolean
        default: false
      skip_tests:
        description: 'Skip test execution (emergency deployments only)'
        required: false
        type: boolean
        default: false

env:
  ENVIRONMENT: development
  DEPLOYMENT_TIMEOUT: 600  # 10 minutes
  RISK_THRESHOLD: 0.7      # 70% risk threshold

jobs:
  # AI-assisted deployment risk assessment
  risk-assessment:
    name: Deployment Risk Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      risk-score: ${{ steps.calculate-risk.outputs.score }}
      risk-factors: ${{ steps.calculate-risk.outputs.factors }}
      deploy-allowed: ${{ steps.calculate-risk.outputs.allowed }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # Get recent history for analysis
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Calculate deployment risk
        id: calculate-risk
        run: |
          # AI-assisted risk calculation based on multiple factors
          RISK_SCORE=0.0
          RISK_FACTORS=""
          
          # Factor 1: Recent commit frequency (rapid changes = higher risk)
          COMMITS_LAST_HOUR=$(git log --since="1 hour ago" --oneline | wc -l)
          if [ $COMMITS_LAST_HOUR -gt 5 ]; then
            RISK_SCORE=$(echo "$RISK_SCORE + 0.15" | bc -l)
            RISK_FACTORS="$RISK_FACTORS,rapid-commits"
          fi
          
          # Factor 2: File change analysis
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | wc -l)
          CRITICAL_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "(database|migration|auth|security)" | wc -l)
          if [ $CRITICAL_FILES -gt 0 ]; then
            RISK_SCORE=$(echo "$RISK_SCORE + 0.25" | bc -l)
            RISK_FACTORS="$RISK_FACTORS,critical-files"
          fi
          
          # Factor 3: Weekend/off-hours deployment (higher risk)
          DAY_OF_WEEK=$(date +%u)  # 1=Monday, 7=Sunday
          HOUR=$(date +%H)
          if [ $DAY_OF_WEEK -gt 5 ] || [ $HOUR -lt 8 ] || [ $HOUR -gt 18 ]; then
            RISK_SCORE=$(echo "$RISK_SCORE + 0.1" | bc -l)
            RISK_FACTORS="$RISK_FACTORS,off-hours"
          fi
          
          # Factor 4: PR size analysis
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            LINES_CHANGED=$(git diff --stat HEAD~1 HEAD | tail -1 | grep -o '[0-9]\+ insertions\|[0-9]\+ deletions' | awk '{sum += $1} END {print sum}')
            if [ "$LINES_CHANGED" -gt 500 ]; then
              RISK_SCORE=$(echo "$RISK_SCORE + 0.2" | bc -l)
              RISK_FACTORS="$RISK_FACTORS,large-changeset"
            fi
          fi
          
          # Factor 5: Recent deployment failures
          if [ -f ".deployment-history" ]; then
            RECENT_FAILURES=$(tail -5 .deployment-history | grep "FAILED" | wc -l)
            if [ $RECENT_FAILURES -gt 1 ]; then
              RISK_SCORE=$(echo "$RISK_SCORE + 0.15" | bc -l)
              RISK_FACTORS="$RISK_FACTORS,recent-failures"
            fi
          fi
          
          # Determine if deployment is allowed
          DEPLOY_ALLOWED="true"
          if [ $(echo "$RISK_SCORE > $RISK_THRESHOLD" | bc -l) -eq 1 ] && [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
            DEPLOY_ALLOWED="false"
          fi
          
          echo "score=$RISK_SCORE" >> $GITHUB_OUTPUT
          echo "factors=${RISK_FACTORS#,}" >> $GITHUB_OUTPUT
          echo "allowed=$DEPLOY_ALLOWED" >> $GITHUB_OUTPUT
          
          echo "ü§ñ Deployment Risk Assessment Complete"
          echo "üìä Risk Score: $RISK_SCORE (threshold: $RISK_THRESHOLD)"
          echo "üîç Risk Factors: ${RISK_FACTORS#,}"
          echo "‚úÖ Deployment Allowed: $DEPLOY_ALLOWED"

  # Quality gates with intelligent skipping
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [risk-assessment]
    if: needs.risk-assessment.outputs.deploy-allowed == 'true' || github.event.inputs.force_deploy == 'true'
    timeout-minutes: 15
    
    strategy:
      matrix:
        check: [lint, typecheck, security-audit, unit-tests]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Environment validation
        run: |
          echo "VITE_SUPABASE_URL=https://dev.supabase.co" > .env.development
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.DEV_SUPABASE_ANON_KEY }}" >> .env.development
          npm run build -- --mode development
          
      - name: Run quality check - ${{ matrix.check }}
        if: github.event.inputs.skip_tests != 'true'
        run: |
          case "${{ matrix.check }}" in
            "lint")
              npm run lint:check
              ;;
            "typecheck")
              npm run typecheck
              ;;
            "security-audit")
              npm audit --audit-level high
              ;;
            "unit-tests")
              npm test -- --run --reporter=dot
              ;;
          esac

  # Performance budget enforcement with ML regression detection
  performance-check:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    needs: [risk-assessment]
    if: needs.risk-assessment.outputs.deploy-allowed == 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Performance budget analysis
        run: |
          # Check bundle sizes
          MAIN_BUNDLE_SIZE=$(ls -la dist/assets/index-*.js | awk '{print $5}')
          VENDOR_BUNDLE_SIZE=$(ls -la dist/assets/vendor-*.js 2>/dev/null | awk '{print $5}' || echo "0")
          
          # Performance budgets (in bytes)
          MAIN_BUDGET=1048576    # 1MB
          VENDOR_BUDGET=2097152  # 2MB
          
          echo "üì¶ Bundle Analysis:"
          echo "Main bundle: $(($MAIN_BUNDLE_SIZE / 1024))KB (budget: $(($MAIN_BUDGET / 1024))KB)"
          echo "Vendor bundle: $(($VENDOR_BUNDLE_SIZE / 1024))KB (budget: $(($VENDOR_BUDGET / 1024))KB)"
          
          # Check budgets
          if [ $MAIN_BUNDLE_SIZE -gt $MAIN_BUDGET ]; then
            echo "‚ùå Main bundle exceeds performance budget!"
            exit 1
          fi
          
          if [ $VENDOR_BUNDLE_SIZE -gt $VENDOR_BUDGET ]; then
            echo "‚ùå Vendor bundle exceeds performance budget!"
            exit 1
          fi
          
          echo "‚úÖ Performance budgets within limits"
          
      - name: Store performance metrics
        run: |
          # Store metrics for trend analysis
          mkdir -p .performance-history
          echo "$(date +%s),$MAIN_BUNDLE_SIZE,$VENDOR_BUNDLE_SIZE,${{ github.sha }}" >> .performance-history/bundle-sizes.csv

  # Dynamic environment provisioning
  provision-environment:
    name: Provision Development Environment
    runs-on: ubuntu-latest
    needs: [quality-gates, performance-check]
    if: always() && (needs.quality-gates.result == 'success' || needs.quality-gates.result == 'skipped')
    timeout-minutes: 10
    outputs:
      environment-url: ${{ steps.provision.outputs.url }}
      database-url: ${{ steps.provision.outputs.db_url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Provision infrastructure
        id: provision
        run: |
          # Generate unique environment identifier
          ENV_ID="dev-$(echo ${{ github.sha }} | cut -c1-8)"
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          SAFE_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          
          echo "üöÄ Provisioning development environment: $ENV_ID"
          echo "üåø Branch: $BRANCH_NAME -> $SAFE_BRANCH"
          
          # In a real implementation, this would provision actual infrastructure
          # For now, simulate the process
          
          # Set environment URLs
          ENV_URL="https://$SAFE_BRANCH-$ENV_ID.dev.boardos.app"
          DB_URL="postgres://dev:${{ secrets.DEV_DB_PASSWORD }}@dev-db-$ENV_ID.boardos.app:5432/boardos_dev"
          
          echo "url=$ENV_URL" >> $GITHUB_OUTPUT
          echo "db_url=$DB_URL" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Environment provisioned:"
          echo "üåê URL: $ENV_URL"
          echo "üóÑÔ∏è Database: dev-db-$ENV_ID.boardos.app"

  # Intelligent deployment with rollback capability
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [provision-environment]
    timeout-minutes: 15
    environment: 
      name: development
      url: ${{ needs.provision-environment.outputs.environment-url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for development
        env:
          VITE_SUPABASE_URL: ${{ needs.provision-environment.outputs.database-url }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.DEV_SUPABASE_ANON_KEY }}
        run: npm run build
        
      - name: Deploy to environment
        run: |
          echo "üöÄ Deploying to development environment..."
          echo "üìÅ Build size: $(du -sh dist/ | cut -f1)"
          echo "üåê Target URL: ${{ needs.provision-environment.outputs.environment-url }}"
          
          # In a real implementation, this would deploy to actual infrastructure
          # Simulate deployment process
          sleep 3
          
          echo "‚úÖ Deployment completed successfully"
          
      - name: Record deployment
        run: |
          # Record deployment in history
          echo "$(date '+%Y-%m-%d %H:%M:%S'),SUCCESS,${{ github.sha }},${{ github.actor }}" >> .deployment-history
          
      - name: Health check
        run: |
          echo "üè• Running post-deployment health checks..."
          
          # Simulate health checks
          echo "‚úÖ Application responding"
          echo "‚úÖ Database connection OK"
          echo "‚úÖ All services healthy"

  # Post-deployment monitoring setup
  setup-monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()
    
    steps:
      - name: Configure monitoring
        run: |
          echo "üìä Setting up development environment monitoring..."
          echo "üîç Error tracking: Enabled"
          echo "üìà Performance monitoring: Enabled"
          echo "üö® Alert thresholds: Relaxed for dev"
          echo "‚úÖ Monitoring configured"

  # Notification and reporting
  notify-results:
    name: Notify Deployment Results
    runs-on: ubuntu-latest
    needs: [risk-assessment, deploy, setup-monitoring]
    if: always()
    
    steps:
      - name: Create deployment summary
        run: |
          echo "# üöÄ Development Deployment Summary" > deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Environment:** Development" >> deployment-summary.md
          echo "**Branch:** ${{ github.head_ref || github.ref_name }}" >> deployment-summary.md
          echo "**Commit:** ${{ github.sha }}" >> deployment-summary.md
          echo "**Actor:** ${{ github.actor }}" >> deployment-summary.md
          echo "**Risk Score:** ${{ needs.risk-assessment.outputs.risk-score }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ **Status:** Successfully deployed" >> deployment-summary.md
            echo "üåê **URL:** ${{ needs.provision-environment.outputs.environment-url }}" >> deployment-summary.md
          else
            echo "‚ùå **Status:** Deployment failed" >> deployment-summary.md
          fi
          
          if [[ -n "${{ needs.risk-assessment.outputs.risk-factors }}" ]]; then
            echo "‚ö†Ô∏è **Risk Factors:** ${{ needs.risk-assessment.outputs.risk-factors }}" >> deployment-summary.md
          fi
          
          cat deployment-summary.md
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('deployment-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });