<!-- AUTO-GENERATED METADATA -->
<!-- Last Updated: 2025-08-29T16:47:21.181Z -->
<!-- Business Logic Files: 12 -->
<!-- END METADATA -->

# Business Logic Context for BoardOS Construction Scheduler

## Resource Attachment Rules

### Safety Requirements (Mandatory Attachments)
**File**: `src/utils/attachmentRules.ts`

#### Equipment Safety Rules:
- **All Equipment MUST have operators** (safety requirement)
  - Pavers: 1 operator required
  - Rollers: 1 operator required  
  - Excavators: 1 operator required
  - Sweepers: 1 operator required
  - Milling Machines: 1 operator required
  - Dozers: 1 operator required
  - Payloaders: 1 operator required
  - Skidsteers: 1 operator required

#### Vehicle Requirements:
- **All Trucks MUST have drivers** (mandatory)
  - Maximum 1 driver per truck
  - Optional: 1 laborer per truck

#### Specialized Equipment Rules:
- **Pavers**:
  - Required: 1 operator
  - Optional: Up to 2 laborers with screwman skills
- **Milling Machines**:
  - Required: 1 operator
  - Optional: 1 groundman

### Attachment Validation Functions:
- `canAttach(sourceType, targetType): boolean` - Check if attachment is allowed
- `getRequiredAttachments(type): ResourceType[]` - Get mandatory attachments
- `getMaxAttachments(sourceType, targetType): number` - Get attachment limits
- `hasRequiredAttachments(type, attachedTypes): boolean` - Validate requirements
- `validateAttachmentGroup(mainType, attachedTypes)` - Complete validation

## Shift Management System

### Shift Types:
1. **Day Shift** (default): Regular daytime operations
2. **Night Shift** (secondary): Nighttime operations with Ctrl+drag

### Multi-Shift Assignment Logic:
- **Normal Drag**: Move assignment (removes from original)
- **Ctrl+Drag**: Create second shift assignment (keeps original)
- **Drag Off Job**: Remove assignment completely

### Time Conflict Detection:
**File**: `src/utils/timeConflictDetection.ts`

#### Conflict Types:
- **Double Shift**: Same resource on day AND night shift
- **Overlapping Times**: Time slot conflicts within same shift
- **Multiple Day Jobs**: Same resource on multiple day jobs

#### Validation Functions:
- `detectTimeConflicts(assignments): TimeConflict[]`
- `detectAllTimeConflicts(assignments, resources): TimeConflict[]`
- `doTimeSlotsOverlap(slot1, slot2): boolean`
- `validateTimeSlotAssignment(assignment, allAssignments): boolean`
- `autoResolveConflicts(conflicts): Assignment[]`

## Visual Indicators System

### Border Color Coding:
**File**: `src/utils/colorSystem.ts`

#### Shift Status Borders:
- **Red Border (`border-red-500`)**: Double shift (day + night)
- **Teal Border (`border-teal-500`)**: Multiple day jobs
- **Orange Border (`border-orange-500`)**: Night shift only
- **Default Border**: Single assignment or unassigned

#### Resource Type Colors:
- **Equipment**: Yellow background (`bg-yellow-500`), black text, yellow border (`border-yellow-700`)
- **Personnel**: 
  - Operators: White background, black text
  - Drivers: Green background (`bg-green-500`), black text
  - Stripers: Blue background (`bg-blue-500`), white text
  - Foremen: Orange background (`bg-orange-500`), black text
  - Laborers: White background, green text
- **Trucks**: Black background (`bg-black`), white text

#### Priority System:
1. **Highest**: Red border (double shift)
2. **Medium**: Teal border (multiple day jobs)
3. **Low**: Orange border (night only)
4. **Default**: Resource type border

### Time Badge Colors:
- **Green Badge**: On-site arrival time
- **Blue Badge**: Yard departure time

## Job Organization Rules

### Row Type System:
**File**: `src/utils/jobUtils.ts`

#### Standard Row Types:
1. **Foreman**: Only foremen allowed
2. **Equipment**: Equipment + required operators
3. **Crew**: All personnel types allowed
4. **Trucks**: Trucks + required drivers
5. **Sweeper**: Sweepers + operators (specialized)
6. **Tack**: Tack-specific operations
7. **MPT**: MPT-specific operations

#### Job Type Recommendations:
- `getRecommendedEquipment(jobType): ResourceType[]`
- `isRowNeededForJobType(rowType, jobType): boolean`
- `isRowTogglable(rowType, jobType): boolean`

### Row Visibility Rules:
- **Milling Jobs**: Show Equipment, Crew, Trucks rows
- **Paving Jobs**: Show Equipment, Crew, Trucks, Sweeper rows
- **Both Jobs**: Show all row types
- **Custom Jobs**: Configurable via JobRowConfig

## Magnet Interaction System

### Auto-Attachment Rules:
**File**: `src/utils/ruleCreator.ts`

#### Magnet Behavior:
- **Equipment dropped on job**: Automatically creates operator requirement
- **Operator dragged near equipment**: Auto-attaches if compatible
- **Multiple compatible operators**: Shows selection dialog
- **Invalid attachments**: Prevented with visual feedback

#### Rule Generation:
- `createMagnetRules(): MagnetInteractionRule[]`
- `createEnhancedMagnetRules(): MagnetInteractionRule[]`
- `buildStandardConstructionRules(): MagnetInteractionRule[]`

### Drop Permission Rules:
**File**: `src/utils/ruleCreator.ts`

#### Row-Based Permissions:
- **Foreman Row**: Only foremen can be dropped
- **Equipment Row**: Only equipment + operators
- **Crew Row**: All personnel types
- **Truck Row**: Only trucks + drivers

#### Functions:
- `createDropRules(): DropRule[]`
- `buildStandardDropRules(): DropRule[]`

## Duration Estimation Logic

### Production Rates (per day):
**File**: `src/services/DurationEstimationService.ts`

#### Base Rates:
- **Milling**: 22,000 sq yards/day
- **Paving Highway**: 2,000 tons/day
- **Paving Parking Lot**: 800 tons/day (slower due to complexity)
- **Paving Residential**: 1,500 tons/day
- **Excavation**: 150 cubic yards/day
- **Drainage**: 300 linear feet/day
- **Concrete**: 50 cubic yards/day

#### Complexity Factors:
- **Base**: 1.0 (normal conditions)
- **Complex**: 1.5+ (difficult terrain, tight spaces)
- **Simple**: 0.8 (ideal conditions)

### Job Phase Logic:
1. **Milling Only**: Single phase
2. **Paving Only**: Single phase
3. **Both (Mill & Pave)**: Sequential phases (mill first, then pave)
4. **Drainage**: Three phases (excavation → drainage → concrete)

## Business Rules Validation

### Pre-Assignment Checks:
1. **Resource Availability**: Not already assigned to conflicting job
2. **Skill Requirements**: Personnel has required certifications
3. **Equipment Status**: Equipment is operational and on-site
4. **Time Conflicts**: No overlapping time slots

### Post-Assignment Validation:
1. **Safety Compliance**: All equipment has required operators
2. **Attachment Limits**: No more than max allowed attachments
3. **Job Requirements**: All required resources are assigned

### Finalization Rules:
- Jobs cannot be finalized without required resources
- Finalized jobs cannot be modified without unfinalizing
- Time changes trigger conflict re-validation

## Optimistic Updates Pattern

### Update Flow:
1. **Immediate UI Update**: Show change instantly
2. **Database Operation**: Send to Supabase
3. **Real-time Confirmation**: Receive confirmation via subscription
4. **Error Recovery**: Revert UI if operation fails

### Implementation Pattern:
```typescript
// Optimistic update
setAssignments(prev => {
  return prev.map(assignment => 
    assignment.id === targetId 
      ? { ...assignment, /* updated fields */ }
      : assignment
  );
});

// Database operation
try {
  await DatabaseService.updateAssignment(updatedAssignment);
} catch (error) {
  // Revert on error
  await loadScheduleData(false);
}
```

## Real-time Synchronization Rules

### Conflict Resolution Priority:
1. **Server State**: Always authoritative
2. **Timestamp**: Later changes win
3. **User Context**: Prefer current user's changes
4. **Manual Resolution**: Show conflict dialog for complex cases

### Subscription Handling:
- **Resource Changes**: Update resource pool immediately
- **Job Changes**: Refresh job columns
- **Assignment Changes**: Update cards with animation
- **Rule Changes**: Refresh validation logic

## Data Integrity Rules

### Cascade Operations:
- **Delete Job**: Remove all assignments
- **Delete Resource**: Remove all assignments
- **Delete Assignment**: Remove all attachments

### Referential Integrity:
- Assignments must reference valid jobs and resources
- Attachments must reference valid assignments
- Time slots must have valid start/end times

### Validation Triggers:
- **Before Save**: Validate business rules
- **After Load**: Validate data consistency  
- **Real-time**: Validate concurrent modifications