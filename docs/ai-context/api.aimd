<!-- AUTO-GENERATED METADATA -->
<!-- Last Updated: 2025-08-29T16:47:21.181Z -->
<!-- Total Files: 92 -->
<!-- Services: 4 -->
<!-- Utilities: 12 -->
<!-- Hooks: 2 -->
<!-- END METADATA -->

# API Context for BoardOS Construction Scheduler

## Services

### DatabaseService
**File**: `src/services/DatabaseService.ts`
**Description**: Complete database service for Supabase integration with real-time updates

#### Key Methods:
- `transformDbEmployee(dbEmployee: any): Employee` - Transform database employee data
- `transformDbEquipment(dbEquipment: any): Equipment` - Transform database equipment data
- `transformDbResource(dbResource: DbResource): Resource` - Transform database resource data
- `transformDbJob(dbJob: DbJob): Job` - Transform database job data
- `transformDbAssignment(dbAssignment: DbAssignment): Assignment` - Transform database assignment data

#### Database Operations:
- `getAllScheduleData()` - Load complete schedule data (resources, jobs, assignments, rules)
- `getJobsByDate(date: Date): Promise<Job[]>` - Get jobs for specific date
- `getJobsByDateRange(startDate: Date, endDate: Date): Promise<Job[]>` - Get jobs in date range
- `updateJobDate(jobId: string, newDate: Date, userId?: string): Promise<void>` - Update job schedule date

#### CRUD Operations:
**Resources:**
- `createResource(resource: Omit<Resource, 'id'>): Promise<Resource>`
- `updateResource(resource: Resource): Promise<Resource>`
- `deleteResource(id: string): Promise<void>`

**Jobs:**
- `createJob(job: Omit<Job, 'id'>): Promise<Job>`
- `updateJob(job: Job): Promise<Job>`
- `deleteJob(id: string): Promise<void>`

**Assignments:**
- `createAssignment(assignment: Omit<Assignment, 'id' | 'attachments'>): Promise<Assignment>`
- `updateAssignment(assignment: Assignment): Promise<Assignment>`
- `deleteAssignment(id: string): Promise<void>`
- `assignResource(resourceId: string, jobId: string, row: RowType): Promise<Assignment>`
- `attachResources(sourceAssignmentId: string, targetAssignmentId: string): Promise<void>`

#### Real-time Subscriptions:
- `subscribeToScheduleChanges(callbacks)` - Setup real-time listeners for all table changes
  - Resources, Jobs, Assignments, Rules, Drop Rules, Job Row Configs, Truck Driver Assignments

#### Rule Management:
- `updateMagnetRule(rule: MagnetInteractionRule): Promise<void>`
- `updateDropRule(rowType: RowType, allowedTypes: ResourceType[]): Promise<void>`
- `getMagnetInteractionRules(): Promise<MagnetInteractionRule[]>`
- `getDropRules(): Promise<DropRule[]>`

### DurationEstimationService
**File**: `src/services/DurationEstimationService.ts`
**Description**: Calculate job durations based on type and scope

#### Production Rates (per day):
- Milling: 22,000 sq yards
- Paving Highway: 2,000 tons
- Paving Parking Lot: 800 tons
- Paving Residential: 1,500 tons
- Excavation: 150 cubic yards
- Drainage: 300 linear feet
- Concrete: 50 cubic yards

#### Key Methods:
- `estimateMillingDays(sqYards: number, complexity: number = 1.0): number`
- `estimatePavingDays(tons: number, jobCategory: Job['job_category'], complexity: number = 1.0): number`
- `estimateExcavationDays(cubicYards: number, complexity: number = 1.0): number`
- `estimateDrainageDays(linearFeet: number, complexity: number = 1.0): number`
- `estimateConcreteDays(cubicYards: number, complexity: number = 1.0): number`
- `calculateJobDuration(job: Partial<Job>): JobEstimate`
- `generateJobPhases(job: Partial<Job>, startDate: string): JobPhase[]`
- `calculateEndDate(startDate: string, totalDays: number): string`

### ExportService
**File**: `src/services/ExportService.ts`
**Description**: Export schedule data to various formats (CSV, Excel, PDF)

### TestDatabaseService
**File**: `src/services/TestDatabaseService.ts`
**Description**: Testing utilities and auto-test generation for database operations

## Hooks

### useScheduler
**File**: `src/context/SchedulerContext.tsx`
**Description**: Main context hook for schedule state management

#### State:
- `jobs: Job[]` - All scheduled jobs
- `resources: Resource[]` - Available resources (equipment, personnel)
- `assignments: Assignment[]` - Resource-to-job mappings
- `selectedDate: Date` - Currently selected date
- `currentView: ViewType` - Current calendar view (day, week, month)
- `filteredResourceType: string | null` - Resource type filter
- `searchTerm: string` - Search filter
- `truckDriverAssignments: Record<string, string>` - Truck-driver mappings
- `magnetInteractionRules: MagnetInteractionRule[]` - Attachment rules
- `dropRules: DropRule[]` - Drag-drop permissions
- `jobRowConfigs: JobRowConfig[]` - Job layout configurations
- `isLoading: boolean` - Loading state
- `error: string | null` - Error state

#### Job Actions:
- `addJob(job: Omit<Job, 'id'>): Promise<void>`
- `updateJob(job: Job): Promise<void>`
- `removeJob(jobId: string): Promise<void>`
- `finalizeJob(jobId: string): Promise<void>`
- `unfinalizeJob(jobId: string): Promise<void>`

#### Resource Actions:
- `addResource(resource: Omit<Resource, 'id'>): Promise<void>`
- `updateResource(resource: Resource): Promise<void>`
- `removeResource(resourceId: string): Promise<void>`
- `toggleResourceOnSite(resourceId: string): Promise<void>`

#### Assignment Actions:
- `assignResource(resourceId: string, jobId: string, row: RowType, position?: number): Promise<string>`
- `assignResourceWithTruckConfig(resourceId: string, jobId: string, row: RowType, truckConfig?: 'flowboy' | 'dump-trailer', position?: number, isSecondShift?: boolean): Promise<string>`
- `updateAssignment(assignment: Assignment): Promise<void>`
- `removeAssignment(assignmentId: string): Promise<void>`
- `attachResources(targetId: string, sourceId: string): Promise<void>`
- `detachResources(assignmentId: string): Promise<void>`
- `updateTimeSlot(assignmentId: string, timeSlot: TimeSlot): Promise<void>`
- `updateAssignmentNote(assignmentId: string, note: string): Promise<void>`

### useMagnet
**File**: `src/hooks/useMagnet.ts`
**Description**: Magnetic attachment system for drag-and-drop operations

#### Methods:
- `useMagnet()` - Hook for single magnet operations
- `useMagnets()` - Hook for multiple magnet operations

### useOptimizedScheduler
**File**: `src/hooks/useOptimizedScheduler.ts`
**Description**: Performance-optimized schedule operations

#### Methods:
- `useJobData()` - Optimized job data loading
- `useResourcePool()` - Optimized resource pool management
- `useOptimizedScheduler()` - Main optimized scheduler hook

## Utilities

### attachmentRules
**File**: `src/utils/attachmentRules.ts`
**Description**: Equipment-operator attachment logic and validation

#### Core Functions:
- `canAttach(sourceType: ResourceType, targetType: ResourceType): boolean`
- `getMaxAttachments(targetType: ResourceType, sourceType: ResourceType): number`
- `getRequiredAttachments(targetType: ResourceType): ResourceType[]`
- `getRequiredSkills(sourceType: ResourceType, targetType: ResourceType): string[]`
- `getValidAttachmentTypes(targetType: ResourceType): ResourceType[]`
- `hasRequiredAttachments(assignment: Assignment, allAssignments: Assignment[]): boolean`
- `validateAttachmentGroup(assignments: Assignment[]): boolean`

#### Attachment Rules:
- **Pavers**: Require 1 operator, allow up to 2 screwmen
- **General Equipment**: Require 1 operator each (roller, excavator, sweeper, etc.)
- **Trucks**: Require 1 driver each
- **Milling Machines**: Can have 1 groundman

### colorSystem
**File**: `src/utils/colorSystem.ts`
**Description**: Resource styling and shift indicators

#### Functions:
- `getResourceStyle(resource: Resource): string` - Get resource background/text colors
- `getResourceBorder(resource: Resource): string` - Get resource border style
- `getShiftStatusBorder(assignments: Assignment[]): string` - Get shift status indicators
- `getCompleteBorderStyle(resource: Resource, assignments: Assignment[]): string`
- `getLegacyResourceColors(resourceType: ResourceType): object`

#### Color Scheme:
- **Equipment**: Yellow background (`bg-yellow-500`), black text, yellow border (`border-yellow-700`)
- **Personnel**: Various colors based on role
- **Shift Indicators**:
  - Red border: Double shift (day + night)
  - Teal border: Multiple day jobs
  - Orange border: Night shift only

### timeConflictDetection
**File**: `src/utils/timeConflictDetection.ts`
**Description**: Overlap detection and resolution for resource scheduling

#### Functions:
- `detectTimeConflicts(assignments: Assignment[]): TimeConflict[]`
- `detectAllTimeConflicts(assignments: Assignment[], resources: Resource[]): TimeConflict[]`
- `doTimeSlotsOverlap(slot1: TimeSlot, slot2: TimeSlot): boolean`
- `getOverlapPeriod(slot1: TimeSlot, slot2: TimeSlot): TimeSlot | null`
- `validateTimeSlotAssignment(assignment: Assignment, allAssignments: Assignment[]): boolean`
- `autoResolveConflicts(conflicts: TimeConflict[]): Assignment[]`

### ruleCreator
**File**: `src/utils/ruleCreator.ts`
**Description**: Generate magnet and drop rules for different job types

#### Functions:
- `createMagnetRules(): MagnetInteractionRule[]`
- `createEnhancedMagnetRules(): MagnetInteractionRule[]`
- `createAdvancedMagnetRules(): MagnetInteractionRule[]`
- `createDropRules(): DropRule[]`
- `buildStandardConstructionRules(): MagnetInteractionRule[]`
- `buildStandardDropRules(): DropRule[]`

### jobUtils
**File**: `src/utils/jobUtils.ts`
**Description**: Job type recommendations and validations

#### Functions:
- `getRecommendedEquipment(jobType: Job['type']): ResourceType[]`
- `isRowNeededForJobType(rowType: RowType, jobType: Job['type']): boolean`
- `isRowTogglable(rowType: RowType, jobType: Job['type']): boolean`

## Context Providers

### SchedulerContext
**File**: `src/context/SchedulerContext.tsx`
**Description**: Global schedule state management with optimistic updates

### DragContext
**File**: `src/context/DragContext.tsx`
**Description**: Drag-and-drop state management for resource assignments

### MobileContext
**File**: `src/context/MobileContext.tsx`
**Description**: Mobile device detection and responsive behavior

### ModalContext
**File**: `src/context/ModalContext.tsx`
**Description**: Modal state management for dialogs and overlays

### KeyboardShortcutsContext
**File**: `src/context/KeyboardShortcutsContext.tsx`
**Description**: Keyboard shortcuts and hotkey management

## Types

### Core Types:
- `Resource` - Equipment, vehicles, and personnel
- `Job` - Construction projects with shifts
- `Assignment` - Resource-to-job mappings with attachments
- `TimeSlot` - Time periods for assignments
- `MagnetInteractionRule` - Attachment rules between resources
- `DropRule` - Drag-drop permissions for job rows
- `JobRowConfig` - Dynamic job layout configurations

### Enums:
- `ResourceType` - All resource categories (operator, driver, truck, paver, etc.)
- `RowType` - Job row types (Foreman, Equipment, Crew, Trucks, etc.)
- `ViewType` - Calendar views (day, week, month)

## Real-time Features

### Supabase Integration:
- Real-time subscriptions for all database tables
- Optimistic UI updates for immediate feedback
- Automatic conflict resolution and sync

### Performance Optimizations:
- Memoized data filtering and sorting
- Virtual scrolling for large datasets
- Debounced search and filter operations
- Background data prefetching